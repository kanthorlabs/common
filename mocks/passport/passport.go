// Code generated by mockery v2.41.0. DO NOT EDIT.

package passport

import (
	context "context"

	entities "github.com/kanthorlabs/common/passport/entities"
	mock "github.com/stretchr/testify/mock"
)

// Passport is an autogenerated mock type for the Passport type
type Passport struct {
	mock.Mock
}

type Passport_Expecter struct {
	mock *mock.Mock
}

func (_m *Passport) EXPECT() *Passport_Expecter {
	return &Passport_Expecter{mock: &_m.Mock}
}

// Connect provides a mock function with given fields: ctx
func (_m *Passport) Connect(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Passport_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type Passport_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Passport_Expecter) Connect(ctx interface{}) *Passport_Connect_Call {
	return &Passport_Connect_Call{Call: _e.mock.On("Connect", ctx)}
}

func (_c *Passport_Connect_Call) Run(run func(ctx context.Context)) *Passport_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Passport_Connect_Call) Return(_a0 error) *Passport_Connect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Passport_Connect_Call) RunAndReturn(run func(context.Context) error) *Passport_Connect_Call {
	_c.Call.Return(run)
	return _c
}

// Disconnect provides a mock function with given fields: ctx
func (_m *Passport) Disconnect(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Disconnect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Passport_Disconnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Disconnect'
type Passport_Disconnect_Call struct {
	*mock.Call
}

// Disconnect is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Passport_Expecter) Disconnect(ctx interface{}) *Passport_Disconnect_Call {
	return &Passport_Disconnect_Call{Call: _e.mock.On("Disconnect", ctx)}
}

func (_c *Passport_Disconnect_Call) Run(run func(ctx context.Context)) *Passport_Disconnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Passport_Disconnect_Call) Return(_a0 error) *Passport_Disconnect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Passport_Disconnect_Call) RunAndReturn(run func(context.Context) error) *Passport_Disconnect_Call {
	_c.Call.Return(run)
	return _c
}

// Liveness provides a mock function with given fields:
func (_m *Passport) Liveness() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Liveness")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Passport_Liveness_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Liveness'
type Passport_Liveness_Call struct {
	*mock.Call
}

// Liveness is a helper method to define mock.On call
func (_e *Passport_Expecter) Liveness() *Passport_Liveness_Call {
	return &Passport_Liveness_Call{Call: _e.mock.On("Liveness")}
}

func (_c *Passport_Liveness_Call) Run(run func()) *Passport_Liveness_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Passport_Liveness_Call) Return(_a0 error) *Passport_Liveness_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Passport_Liveness_Call) RunAndReturn(run func() error) *Passport_Liveness_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: ctx, name, credentials
func (_m *Passport) Login(ctx context.Context, name string, credentials *entities.Credentials) (*entities.Account, error) {
	ret := _m.Called(ctx, name, credentials)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *entities.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *entities.Credentials) (*entities.Account, error)); ok {
		return rf(ctx, name, credentials)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *entities.Credentials) *entities.Account); ok {
		r0 = rf(ctx, name, credentials)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *entities.Credentials) error); ok {
		r1 = rf(ctx, name, credentials)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Passport_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type Passport_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - credentials *entities.Credentials
func (_e *Passport_Expecter) Login(ctx interface{}, name interface{}, credentials interface{}) *Passport_Login_Call {
	return &Passport_Login_Call{Call: _e.mock.On("Login", ctx, name, credentials)}
}

func (_c *Passport_Login_Call) Run(run func(ctx context.Context, name string, credentials *entities.Credentials)) *Passport_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*entities.Credentials))
	})
	return _c
}

func (_c *Passport_Login_Call) Return(_a0 *entities.Account, _a1 error) *Passport_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Passport_Login_Call) RunAndReturn(run func(context.Context, string, *entities.Credentials) (*entities.Account, error)) *Passport_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Logout provides a mock function with given fields: ctx, name, credentials
func (_m *Passport) Logout(ctx context.Context, name string, credentials *entities.Credentials) error {
	ret := _m.Called(ctx, name, credentials)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *entities.Credentials) error); ok {
		r0 = rf(ctx, name, credentials)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Passport_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type Passport_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - credentials *entities.Credentials
func (_e *Passport_Expecter) Logout(ctx interface{}, name interface{}, credentials interface{}) *Passport_Logout_Call {
	return &Passport_Logout_Call{Call: _e.mock.On("Logout", ctx, name, credentials)}
}

func (_c *Passport_Logout_Call) Run(run func(ctx context.Context, name string, credentials *entities.Credentials)) *Passport_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*entities.Credentials))
	})
	return _c
}

func (_c *Passport_Logout_Call) Return(_a0 error) *Passport_Logout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Passport_Logout_Call) RunAndReturn(run func(context.Context, string, *entities.Credentials) error) *Passport_Logout_Call {
	_c.Call.Return(run)
	return _c
}

// Readiness provides a mock function with given fields:
func (_m *Passport) Readiness() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Readiness")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Passport_Readiness_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Readiness'
type Passport_Readiness_Call struct {
	*mock.Call
}

// Readiness is a helper method to define mock.On call
func (_e *Passport_Expecter) Readiness() *Passport_Readiness_Call {
	return &Passport_Readiness_Call{Call: _e.mock.On("Readiness")}
}

func (_c *Passport_Readiness_Call) Run(run func()) *Passport_Readiness_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Passport_Readiness_Call) Return(_a0 error) *Passport_Readiness_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Passport_Readiness_Call) RunAndReturn(run func() error) *Passport_Readiness_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: ctx, name, acc
func (_m *Passport) Register(ctx context.Context, name string, acc *entities.Account) error {
	ret := _m.Called(ctx, name, acc)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *entities.Account) error); ok {
		r0 = rf(ctx, name, acc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Passport_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type Passport_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - acc *entities.Account
func (_e *Passport_Expecter) Register(ctx interface{}, name interface{}, acc interface{}) *Passport_Register_Call {
	return &Passport_Register_Call{Call: _e.mock.On("Register", ctx, name, acc)}
}

func (_c *Passport_Register_Call) Run(run func(ctx context.Context, name string, acc *entities.Account)) *Passport_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*entities.Account))
	})
	return _c
}

func (_c *Passport_Register_Call) Return(_a0 error) *Passport_Register_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Passport_Register_Call) RunAndReturn(run func(context.Context, string, *entities.Account) error) *Passport_Register_Call {
	_c.Call.Return(run)
	return _c
}

// Verify provides a mock function with given fields: ctx, name, credentials
func (_m *Passport) Verify(ctx context.Context, name string, credentials *entities.Credentials) (*entities.Account, error) {
	ret := _m.Called(ctx, name, credentials)

	if len(ret) == 0 {
		panic("no return value specified for Verify")
	}

	var r0 *entities.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *entities.Credentials) (*entities.Account, error)); ok {
		return rf(ctx, name, credentials)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *entities.Credentials) *entities.Account); ok {
		r0 = rf(ctx, name, credentials)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *entities.Credentials) error); ok {
		r1 = rf(ctx, name, credentials)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Passport_Verify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Verify'
type Passport_Verify_Call struct {
	*mock.Call
}

// Verify is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - credentials *entities.Credentials
func (_e *Passport_Expecter) Verify(ctx interface{}, name interface{}, credentials interface{}) *Passport_Verify_Call {
	return &Passport_Verify_Call{Call: _e.mock.On("Verify", ctx, name, credentials)}
}

func (_c *Passport_Verify_Call) Run(run func(ctx context.Context, name string, credentials *entities.Credentials)) *Passport_Verify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*entities.Credentials))
	})
	return _c
}

func (_c *Passport_Verify_Call) Return(_a0 *entities.Account, _a1 error) *Passport_Verify_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Passport_Verify_Call) RunAndReturn(run func(context.Context, string, *entities.Credentials) (*entities.Account, error)) *Passport_Verify_Call {
	_c.Call.Return(run)
	return _c
}

// NewPassport creates a new instance of Passport. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPassport(t interface {
	mock.TestingT
	Cleanup(func())
}) *Passport {
	mock := &Passport{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
