// Code generated by mockery v2.41.0. DO NOT EDIT.

package strategies

import (
	context "context"

	entities "github.com/kanthorlabs/common/passport/entities"
	mock "github.com/stretchr/testify/mock"

	strategies "github.com/kanthorlabs/common/passport/strategies"
)

// Strategy is an autogenerated mock type for the Strategy type
type Strategy struct {
	mock.Mock
}

type Strategy_Expecter struct {
	mock *mock.Mock
}

func (_m *Strategy) EXPECT() *Strategy_Expecter {
	return &Strategy_Expecter{mock: &_m.Mock}
}

// Connect provides a mock function with given fields: ctx
func (_m *Strategy) Connect(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Strategy_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type Strategy_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Strategy_Expecter) Connect(ctx interface{}) *Strategy_Connect_Call {
	return &Strategy_Connect_Call{Call: _e.mock.On("Connect", ctx)}
}

func (_c *Strategy_Connect_Call) Run(run func(ctx context.Context)) *Strategy_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Strategy_Connect_Call) Return(_a0 error) *Strategy_Connect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Strategy_Connect_Call) RunAndReturn(run func(context.Context) error) *Strategy_Connect_Call {
	_c.Call.Return(run)
	return _c
}

// Disconnect provides a mock function with given fields: ctx
func (_m *Strategy) Disconnect(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Disconnect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Strategy_Disconnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Disconnect'
type Strategy_Disconnect_Call struct {
	*mock.Call
}

// Disconnect is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Strategy_Expecter) Disconnect(ctx interface{}) *Strategy_Disconnect_Call {
	return &Strategy_Disconnect_Call{Call: _e.mock.On("Disconnect", ctx)}
}

func (_c *Strategy_Disconnect_Call) Run(run func(ctx context.Context)) *Strategy_Disconnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Strategy_Disconnect_Call) Return(_a0 error) *Strategy_Disconnect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Strategy_Disconnect_Call) RunAndReturn(run func(context.Context) error) *Strategy_Disconnect_Call {
	_c.Call.Return(run)
	return _c
}

// Liveness provides a mock function with given fields:
func (_m *Strategy) Liveness() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Liveness")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Strategy_Liveness_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Liveness'
type Strategy_Liveness_Call struct {
	*mock.Call
}

// Liveness is a helper method to define mock.On call
func (_e *Strategy_Expecter) Liveness() *Strategy_Liveness_Call {
	return &Strategy_Liveness_Call{Call: _e.mock.On("Liveness")}
}

func (_c *Strategy_Liveness_Call) Run(run func()) *Strategy_Liveness_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Strategy_Liveness_Call) Return(_a0 error) *Strategy_Liveness_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Strategy_Liveness_Call) RunAndReturn(run func() error) *Strategy_Liveness_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: ctx, creds
func (_m *Strategy) Login(ctx context.Context, creds entities.Credentials) (*entities.Tokens, error) {
	ret := _m.Called(ctx, creds)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *entities.Tokens
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Credentials) (*entities.Tokens, error)); ok {
		return rf(ctx, creds)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.Credentials) *entities.Tokens); ok {
		r0 = rf(ctx, creds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Tokens)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.Credentials) error); ok {
		r1 = rf(ctx, creds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Strategy_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type Strategy_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - creds entities.Credentials
func (_e *Strategy_Expecter) Login(ctx interface{}, creds interface{}) *Strategy_Login_Call {
	return &Strategy_Login_Call{Call: _e.mock.On("Login", ctx, creds)}
}

func (_c *Strategy_Login_Call) Run(run func(ctx context.Context, creds entities.Credentials)) *Strategy_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.Credentials))
	})
	return _c
}

func (_c *Strategy_Login_Call) Return(_a0 *entities.Tokens, _a1 error) *Strategy_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Strategy_Login_Call) RunAndReturn(run func(context.Context, entities.Credentials) (*entities.Tokens, error)) *Strategy_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Logout provides a mock function with given fields: ctx, tokens
func (_m *Strategy) Logout(ctx context.Context, tokens entities.Tokens) error {
	ret := _m.Called(ctx, tokens)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Tokens) error); ok {
		r0 = rf(ctx, tokens)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Strategy_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type Strategy_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
//   - ctx context.Context
//   - tokens entities.Tokens
func (_e *Strategy_Expecter) Logout(ctx interface{}, tokens interface{}) *Strategy_Logout_Call {
	return &Strategy_Logout_Call{Call: _e.mock.On("Logout", ctx, tokens)}
}

func (_c *Strategy_Logout_Call) Run(run func(ctx context.Context, tokens entities.Tokens)) *Strategy_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.Tokens))
	})
	return _c
}

func (_c *Strategy_Logout_Call) Return(_a0 error) *Strategy_Logout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Strategy_Logout_Call) RunAndReturn(run func(context.Context, entities.Tokens) error) *Strategy_Logout_Call {
	_c.Call.Return(run)
	return _c
}

// Management provides a mock function with given fields:
func (_m *Strategy) Management() strategies.Management {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Management")
	}

	var r0 strategies.Management
	if rf, ok := ret.Get(0).(func() strategies.Management); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(strategies.Management)
		}
	}

	return r0
}

// Strategy_Management_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Management'
type Strategy_Management_Call struct {
	*mock.Call
}

// Management is a helper method to define mock.On call
func (_e *Strategy_Expecter) Management() *Strategy_Management_Call {
	return &Strategy_Management_Call{Call: _e.mock.On("Management")}
}

func (_c *Strategy_Management_Call) Run(run func()) *Strategy_Management_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Strategy_Management_Call) Return(_a0 strategies.Management) *Strategy_Management_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Strategy_Management_Call) RunAndReturn(run func() strategies.Management) *Strategy_Management_Call {
	_c.Call.Return(run)
	return _c
}

// Readiness provides a mock function with given fields:
func (_m *Strategy) Readiness() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Readiness")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Strategy_Readiness_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Readiness'
type Strategy_Readiness_Call struct {
	*mock.Call
}

// Readiness is a helper method to define mock.On call
func (_e *Strategy_Expecter) Readiness() *Strategy_Readiness_Call {
	return &Strategy_Readiness_Call{Call: _e.mock.On("Readiness")}
}

func (_c *Strategy_Readiness_Call) Run(run func()) *Strategy_Readiness_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Strategy_Readiness_Call) Return(_a0 error) *Strategy_Readiness_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Strategy_Readiness_Call) RunAndReturn(run func() error) *Strategy_Readiness_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: ctx, acc
func (_m *Strategy) Register(ctx context.Context, acc entities.Account) error {
	ret := _m.Called(ctx, acc)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Account) error); ok {
		r0 = rf(ctx, acc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Strategy_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type Strategy_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - acc entities.Account
func (_e *Strategy_Expecter) Register(ctx interface{}, acc interface{}) *Strategy_Register_Call {
	return &Strategy_Register_Call{Call: _e.mock.On("Register", ctx, acc)}
}

func (_c *Strategy_Register_Call) Run(run func(ctx context.Context, acc entities.Account)) *Strategy_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.Account))
	})
	return _c
}

func (_c *Strategy_Register_Call) Return(_a0 error) *Strategy_Register_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Strategy_Register_Call) RunAndReturn(run func(context.Context, entities.Account) error) *Strategy_Register_Call {
	_c.Call.Return(run)
	return _c
}

// Verify provides a mock function with given fields: ctx, tokens
func (_m *Strategy) Verify(ctx context.Context, tokens entities.Tokens) (*entities.Account, error) {
	ret := _m.Called(ctx, tokens)

	if len(ret) == 0 {
		panic("no return value specified for Verify")
	}

	var r0 *entities.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Tokens) (*entities.Account, error)); ok {
		return rf(ctx, tokens)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.Tokens) *entities.Account); ok {
		r0 = rf(ctx, tokens)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.Tokens) error); ok {
		r1 = rf(ctx, tokens)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Strategy_Verify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Verify'
type Strategy_Verify_Call struct {
	*mock.Call
}

// Verify is a helper method to define mock.On call
//   - ctx context.Context
//   - tokens entities.Tokens
func (_e *Strategy_Expecter) Verify(ctx interface{}, tokens interface{}) *Strategy_Verify_Call {
	return &Strategy_Verify_Call{Call: _e.mock.On("Verify", ctx, tokens)}
}

func (_c *Strategy_Verify_Call) Run(run func(ctx context.Context, tokens entities.Tokens)) *Strategy_Verify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.Tokens))
	})
	return _c
}

func (_c *Strategy_Verify_Call) Return(_a0 *entities.Account, _a1 error) *Strategy_Verify_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Strategy_Verify_Call) RunAndReturn(run func(context.Context, entities.Tokens) (*entities.Account, error)) *Strategy_Verify_Call {
	_c.Call.Return(run)
	return _c
}

// NewStrategy creates a new instance of Strategy. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStrategy(t interface {
	mock.TestingT
	Cleanup(func())
}) *Strategy {
	mock := &Strategy{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
