// Code generated by mockery v2.41.0. DO NOT EDIT.

package cache

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// Cache is an autogenerated mock type for the Cache type
type Cache struct {
	mock.Mock
}

type Cache_Expecter struct {
	mock *mock.Mock
}

func (_m *Cache) EXPECT() *Cache_Expecter {
	return &Cache_Expecter{mock: &_m.Mock}
}

// Connect provides a mock function with given fields: ctx
func (_m *Cache) Connect(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cache_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type Cache_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Cache_Expecter) Connect(ctx interface{}) *Cache_Connect_Call {
	return &Cache_Connect_Call{Call: _e.mock.On("Connect", ctx)}
}

func (_c *Cache_Connect_Call) Run(run func(ctx context.Context)) *Cache_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Cache_Connect_Call) Return(_a0 error) *Cache_Connect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Cache_Connect_Call) RunAndReturn(run func(context.Context) error) *Cache_Connect_Call {
	_c.Call.Return(run)
	return _c
}

// Del provides a mock function with given fields: ctx, key
func (_m *Cache) Del(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Del")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cache_Del_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Del'
type Cache_Del_Call struct {
	*mock.Call
}

// Del is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *Cache_Expecter) Del(ctx interface{}, key interface{}) *Cache_Del_Call {
	return &Cache_Del_Call{Call: _e.mock.On("Del", ctx, key)}
}

func (_c *Cache_Del_Call) Run(run func(ctx context.Context, key string)) *Cache_Del_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Cache_Del_Call) Return(_a0 error) *Cache_Del_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Cache_Del_Call) RunAndReturn(run func(context.Context, string) error) *Cache_Del_Call {
	_c.Call.Return(run)
	return _c
}

// Disconnect provides a mock function with given fields: ctx
func (_m *Cache) Disconnect(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Disconnect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cache_Disconnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Disconnect'
type Cache_Disconnect_Call struct {
	*mock.Call
}

// Disconnect is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Cache_Expecter) Disconnect(ctx interface{}) *Cache_Disconnect_Call {
	return &Cache_Disconnect_Call{Call: _e.mock.On("Disconnect", ctx)}
}

func (_c *Cache_Disconnect_Call) Run(run func(ctx context.Context)) *Cache_Disconnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Cache_Disconnect_Call) Return(_a0 error) *Cache_Disconnect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Cache_Disconnect_Call) RunAndReturn(run func(context.Context) error) *Cache_Disconnect_Call {
	_c.Call.Return(run)
	return _c
}

// Exist provides a mock function with given fields: ctx, key
func (_m *Cache) Exist(ctx context.Context, key string) bool {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Exist")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Cache_Exist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exist'
type Cache_Exist_Call struct {
	*mock.Call
}

// Exist is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *Cache_Expecter) Exist(ctx interface{}, key interface{}) *Cache_Exist_Call {
	return &Cache_Exist_Call{Call: _e.mock.On("Exist", ctx, key)}
}

func (_c *Cache_Exist_Call) Run(run func(ctx context.Context, key string)) *Cache_Exist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Cache_Exist_Call) Return(_a0 bool) *Cache_Exist_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Cache_Exist_Call) RunAndReturn(run func(context.Context, string) bool) *Cache_Exist_Call {
	_c.Call.Return(run)
	return _c
}

// Expire provides a mock function with given fields: ctx, key, at
func (_m *Cache) Expire(ctx context.Context, key string, at time.Time) error {
	ret := _m.Called(ctx, key, at)

	if len(ret) == 0 {
		panic("no return value specified for Expire")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) error); ok {
		r0 = rf(ctx, key, at)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cache_Expire_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Expire'
type Cache_Expire_Call struct {
	*mock.Call
}

// Expire is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - at time.Time
func (_e *Cache_Expecter) Expire(ctx interface{}, key interface{}, at interface{}) *Cache_Expire_Call {
	return &Cache_Expire_Call{Call: _e.mock.On("Expire", ctx, key, at)}
}

func (_c *Cache_Expire_Call) Run(run func(ctx context.Context, key string, at time.Time)) *Cache_Expire_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Time))
	})
	return _c
}

func (_c *Cache_Expire_Call) Return(_a0 error) *Cache_Expire_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Cache_Expire_Call) RunAndReturn(run func(context.Context, string, time.Time) error) *Cache_Expire_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, key
func (_m *Cache) Get(ctx context.Context, key string) ([]byte, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]byte, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Cache_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Cache_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *Cache_Expecter) Get(ctx interface{}, key interface{}) *Cache_Get_Call {
	return &Cache_Get_Call{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *Cache_Get_Call) Run(run func(ctx context.Context, key string)) *Cache_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Cache_Get_Call) Return(_a0 []byte, _a1 error) *Cache_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Cache_Get_Call) RunAndReturn(run func(context.Context, string) ([]byte, error)) *Cache_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Liveness provides a mock function with given fields:
func (_m *Cache) Liveness() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Liveness")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cache_Liveness_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Liveness'
type Cache_Liveness_Call struct {
	*mock.Call
}

// Liveness is a helper method to define mock.On call
func (_e *Cache_Expecter) Liveness() *Cache_Liveness_Call {
	return &Cache_Liveness_Call{Call: _e.mock.On("Liveness")}
}

func (_c *Cache_Liveness_Call) Run(run func()) *Cache_Liveness_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Cache_Liveness_Call) Return(_a0 error) *Cache_Liveness_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Cache_Liveness_Call) RunAndReturn(run func() error) *Cache_Liveness_Call {
	_c.Call.Return(run)
	return _c
}

// Readiness provides a mock function with given fields:
func (_m *Cache) Readiness() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Readiness")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cache_Readiness_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Readiness'
type Cache_Readiness_Call struct {
	*mock.Call
}

// Readiness is a helper method to define mock.On call
func (_e *Cache_Expecter) Readiness() *Cache_Readiness_Call {
	return &Cache_Readiness_Call{Call: _e.mock.On("Readiness")}
}

func (_c *Cache_Readiness_Call) Run(run func()) *Cache_Readiness_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Cache_Readiness_Call) Return(_a0 error) *Cache_Readiness_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Cache_Readiness_Call) RunAndReturn(run func() error) *Cache_Readiness_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: ctx, key, entry, ttl
func (_m *Cache) Set(ctx context.Context, key string, entry interface{}, ttl time.Duration) error {
	ret := _m.Called(ctx, key, entry, ttl)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, time.Duration) error); ok {
		r0 = rf(ctx, key, entry, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cache_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type Cache_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - entry interface{}
//   - ttl time.Duration
func (_e *Cache_Expecter) Set(ctx interface{}, key interface{}, entry interface{}, ttl interface{}) *Cache_Set_Call {
	return &Cache_Set_Call{Call: _e.mock.On("Set", ctx, key, entry, ttl)}
}

func (_c *Cache_Set_Call) Run(run func(ctx context.Context, key string, entry interface{}, ttl time.Duration)) *Cache_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), args[3].(time.Duration))
	})
	return _c
}

func (_c *Cache_Set_Call) Return(_a0 error) *Cache_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Cache_Set_Call) RunAndReturn(run func(context.Context, string, interface{}, time.Duration) error) *Cache_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewCache creates a new instance of Cache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *Cache {
	mock := &Cache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
