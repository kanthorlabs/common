// Code generated by mockery v2.41.0. DO NOT EDIT.

package jetstream

import (
	jetstream "github.com/nats-io/nats.go/jetstream"
	mock "github.com/stretchr/testify/mock"
)

// MessageBatch is an autogenerated mock type for the MessageBatch type
type MessageBatch struct {
	mock.Mock
}

type MessageBatch_Expecter struct {
	mock *mock.Mock
}

func (_m *MessageBatch) EXPECT() *MessageBatch_Expecter {
	return &MessageBatch_Expecter{mock: &_m.Mock}
}

// Error provides a mock function with given fields:
func (_m *MessageBatch) Error() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Error")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MessageBatch_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type MessageBatch_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
func (_e *MessageBatch_Expecter) Error() *MessageBatch_Error_Call {
	return &MessageBatch_Error_Call{Call: _e.mock.On("Error")}
}

func (_c *MessageBatch_Error_Call) Run(run func()) *MessageBatch_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MessageBatch_Error_Call) Return(_a0 error) *MessageBatch_Error_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MessageBatch_Error_Call) RunAndReturn(run func() error) *MessageBatch_Error_Call {
	_c.Call.Return(run)
	return _c
}

// Messages provides a mock function with given fields:
func (_m *MessageBatch) Messages() <-chan jetstream.Msg {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Messages")
	}

	var r0 <-chan jetstream.Msg
	if rf, ok := ret.Get(0).(func() <-chan jetstream.Msg); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan jetstream.Msg)
		}
	}

	return r0
}

// MessageBatch_Messages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Messages'
type MessageBatch_Messages_Call struct {
	*mock.Call
}

// Messages is a helper method to define mock.On call
func (_e *MessageBatch_Expecter) Messages() *MessageBatch_Messages_Call {
	return &MessageBatch_Messages_Call{Call: _e.mock.On("Messages")}
}

func (_c *MessageBatch_Messages_Call) Run(run func()) *MessageBatch_Messages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MessageBatch_Messages_Call) Return(_a0 <-chan jetstream.Msg) *MessageBatch_Messages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MessageBatch_Messages_Call) RunAndReturn(run func() <-chan jetstream.Msg) *MessageBatch_Messages_Call {
	_c.Call.Return(run)
	return _c
}

// NewMessageBatch creates a new instance of MessageBatch. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessageBatch(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessageBatch {
	mock := &MessageBatch{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
