// Code generated by mockery v2.41.0. DO NOT EDIT.

package gatekeeper

import (
	context "context"

	entities "github.com/kanthorlabs/common/gatekeeper/entities"

	mock "github.com/stretchr/testify/mock"
)

// Gatekeeper is an autogenerated mock type for the Gatekeeper type
type Gatekeeper struct {
	mock.Mock
}

type Gatekeeper_Expecter struct {
	mock *mock.Mock
}

func (_m *Gatekeeper) EXPECT() *Gatekeeper_Expecter {
	return &Gatekeeper_Expecter{mock: &_m.Mock}
}

// Connect provides a mock function with given fields: ctx
func (_m *Gatekeeper) Connect(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Gatekeeper_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type Gatekeeper_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Gatekeeper_Expecter) Connect(ctx interface{}) *Gatekeeper_Connect_Call {
	return &Gatekeeper_Connect_Call{Call: _e.mock.On("Connect", ctx)}
}

func (_c *Gatekeeper_Connect_Call) Run(run func(ctx context.Context)) *Gatekeeper_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Gatekeeper_Connect_Call) Return(_a0 error) *Gatekeeper_Connect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Gatekeeper_Connect_Call) RunAndReturn(run func(context.Context) error) *Gatekeeper_Connect_Call {
	_c.Call.Return(run)
	return _c
}

// Disconnect provides a mock function with given fields: ctx
func (_m *Gatekeeper) Disconnect(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Disconnect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Gatekeeper_Disconnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Disconnect'
type Gatekeeper_Disconnect_Call struct {
	*mock.Call
}

// Disconnect is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Gatekeeper_Expecter) Disconnect(ctx interface{}) *Gatekeeper_Disconnect_Call {
	return &Gatekeeper_Disconnect_Call{Call: _e.mock.On("Disconnect", ctx)}
}

func (_c *Gatekeeper_Disconnect_Call) Run(run func(ctx context.Context)) *Gatekeeper_Disconnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Gatekeeper_Disconnect_Call) Return(_a0 error) *Gatekeeper_Disconnect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Gatekeeper_Disconnect_Call) RunAndReturn(run func(context.Context) error) *Gatekeeper_Disconnect_Call {
	_c.Call.Return(run)
	return _c
}

// Enforce provides a mock function with given fields: ctx, evaluation, permission
func (_m *Gatekeeper) Enforce(ctx context.Context, evaluation *entities.Evaluation, permission *entities.Permission) error {
	ret := _m.Called(ctx, evaluation, permission)

	if len(ret) == 0 {
		panic("no return value specified for Enforce")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Evaluation, *entities.Permission) error); ok {
		r0 = rf(ctx, evaluation, permission)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Gatekeeper_Enforce_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enforce'
type Gatekeeper_Enforce_Call struct {
	*mock.Call
}

// Enforce is a helper method to define mock.On call
//   - ctx context.Context
//   - evaluation *entities.Evaluation
//   - permission *entities.Permission
func (_e *Gatekeeper_Expecter) Enforce(ctx interface{}, evaluation interface{}, permission interface{}) *Gatekeeper_Enforce_Call {
	return &Gatekeeper_Enforce_Call{Call: _e.mock.On("Enforce", ctx, evaluation, permission)}
}

func (_c *Gatekeeper_Enforce_Call) Run(run func(ctx context.Context, evaluation *entities.Evaluation, permission *entities.Permission)) *Gatekeeper_Enforce_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.Evaluation), args[2].(*entities.Permission))
	})
	return _c
}

func (_c *Gatekeeper_Enforce_Call) Return(_a0 error) *Gatekeeper_Enforce_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Gatekeeper_Enforce_Call) RunAndReturn(run func(context.Context, *entities.Evaluation, *entities.Permission) error) *Gatekeeper_Enforce_Call {
	_c.Call.Return(run)
	return _c
}

// Grant provides a mock function with given fields: ctx, evaluation
func (_m *Gatekeeper) Grant(ctx context.Context, evaluation *entities.Evaluation) error {
	ret := _m.Called(ctx, evaluation)

	if len(ret) == 0 {
		panic("no return value specified for Grant")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Evaluation) error); ok {
		r0 = rf(ctx, evaluation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Gatekeeper_Grant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Grant'
type Gatekeeper_Grant_Call struct {
	*mock.Call
}

// Grant is a helper method to define mock.On call
//   - ctx context.Context
//   - evaluation *entities.Evaluation
func (_e *Gatekeeper_Expecter) Grant(ctx interface{}, evaluation interface{}) *Gatekeeper_Grant_Call {
	return &Gatekeeper_Grant_Call{Call: _e.mock.On("Grant", ctx, evaluation)}
}

func (_c *Gatekeeper_Grant_Call) Run(run func(ctx context.Context, evaluation *entities.Evaluation)) *Gatekeeper_Grant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.Evaluation))
	})
	return _c
}

func (_c *Gatekeeper_Grant_Call) Return(_a0 error) *Gatekeeper_Grant_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Gatekeeper_Grant_Call) RunAndReturn(run func(context.Context, *entities.Evaluation) error) *Gatekeeper_Grant_Call {
	_c.Call.Return(run)
	return _c
}

// Liveness provides a mock function with given fields:
func (_m *Gatekeeper) Liveness() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Liveness")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Gatekeeper_Liveness_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Liveness'
type Gatekeeper_Liveness_Call struct {
	*mock.Call
}

// Liveness is a helper method to define mock.On call
func (_e *Gatekeeper_Expecter) Liveness() *Gatekeeper_Liveness_Call {
	return &Gatekeeper_Liveness_Call{Call: _e.mock.On("Liveness")}
}

func (_c *Gatekeeper_Liveness_Call) Run(run func()) *Gatekeeper_Liveness_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Gatekeeper_Liveness_Call) Return(_a0 error) *Gatekeeper_Liveness_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Gatekeeper_Liveness_Call) RunAndReturn(run func() error) *Gatekeeper_Liveness_Call {
	_c.Call.Return(run)
	return _c
}

// Readiness provides a mock function with given fields:
func (_m *Gatekeeper) Readiness() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Readiness")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Gatekeeper_Readiness_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Readiness'
type Gatekeeper_Readiness_Call struct {
	*mock.Call
}

// Readiness is a helper method to define mock.On call
func (_e *Gatekeeper_Expecter) Readiness() *Gatekeeper_Readiness_Call {
	return &Gatekeeper_Readiness_Call{Call: _e.mock.On("Readiness")}
}

func (_c *Gatekeeper_Readiness_Call) Run(run func()) *Gatekeeper_Readiness_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Gatekeeper_Readiness_Call) Return(_a0 error) *Gatekeeper_Readiness_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Gatekeeper_Readiness_Call) RunAndReturn(run func() error) *Gatekeeper_Readiness_Call {
	_c.Call.Return(run)
	return _c
}

// Revoke provides a mock function with given fields: ctx, evaluation
func (_m *Gatekeeper) Revoke(ctx context.Context, evaluation *entities.Evaluation) error {
	ret := _m.Called(ctx, evaluation)

	if len(ret) == 0 {
		panic("no return value specified for Revoke")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Evaluation) error); ok {
		r0 = rf(ctx, evaluation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Gatekeeper_Revoke_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Revoke'
type Gatekeeper_Revoke_Call struct {
	*mock.Call
}

// Revoke is a helper method to define mock.On call
//   - ctx context.Context
//   - evaluation *entities.Evaluation
func (_e *Gatekeeper_Expecter) Revoke(ctx interface{}, evaluation interface{}) *Gatekeeper_Revoke_Call {
	return &Gatekeeper_Revoke_Call{Call: _e.mock.On("Revoke", ctx, evaluation)}
}

func (_c *Gatekeeper_Revoke_Call) Run(run func(ctx context.Context, evaluation *entities.Evaluation)) *Gatekeeper_Revoke_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.Evaluation))
	})
	return _c
}

func (_c *Gatekeeper_Revoke_Call) Return(_a0 error) *Gatekeeper_Revoke_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Gatekeeper_Revoke_Call) RunAndReturn(run func(context.Context, *entities.Evaluation) error) *Gatekeeper_Revoke_Call {
	_c.Call.Return(run)
	return _c
}

// Tenants provides a mock function with given fields: ctx, username
func (_m *Gatekeeper) Tenants(ctx context.Context, username string) ([]entities.Tenant, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for Tenants")
	}

	var r0 []entities.Tenant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]entities.Tenant, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []entities.Tenant); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Tenant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Gatekeeper_Tenants_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Tenants'
type Gatekeeper_Tenants_Call struct {
	*mock.Call
}

// Tenants is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *Gatekeeper_Expecter) Tenants(ctx interface{}, username interface{}) *Gatekeeper_Tenants_Call {
	return &Gatekeeper_Tenants_Call{Call: _e.mock.On("Tenants", ctx, username)}
}

func (_c *Gatekeeper_Tenants_Call) Run(run func(ctx context.Context, username string)) *Gatekeeper_Tenants_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Gatekeeper_Tenants_Call) Return(_a0 []entities.Tenant, _a1 error) *Gatekeeper_Tenants_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Gatekeeper_Tenants_Call) RunAndReturn(run func(context.Context, string) ([]entities.Tenant, error)) *Gatekeeper_Tenants_Call {
	_c.Call.Return(run)
	return _c
}

// Users provides a mock function with given fields: ctx, tenant
func (_m *Gatekeeper) Users(ctx context.Context, tenant string) ([]entities.User, error) {
	ret := _m.Called(ctx, tenant)

	if len(ret) == 0 {
		panic("no return value specified for Users")
	}

	var r0 []entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]entities.User, error)); ok {
		return rf(ctx, tenant)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []entities.User); ok {
		r0 = rf(ctx, tenant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tenant)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Gatekeeper_Users_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Users'
type Gatekeeper_Users_Call struct {
	*mock.Call
}

// Users is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant string
func (_e *Gatekeeper_Expecter) Users(ctx interface{}, tenant interface{}) *Gatekeeper_Users_Call {
	return &Gatekeeper_Users_Call{Call: _e.mock.On("Users", ctx, tenant)}
}

func (_c *Gatekeeper_Users_Call) Run(run func(ctx context.Context, tenant string)) *Gatekeeper_Users_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Gatekeeper_Users_Call) Return(_a0 []entities.User, _a1 error) *Gatekeeper_Users_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Gatekeeper_Users_Call) RunAndReturn(run func(context.Context, string) ([]entities.User, error)) *Gatekeeper_Users_Call {
	_c.Call.Return(run)
	return _c
}

// NewGatekeeper creates a new instance of Gatekeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGatekeeper(t interface {
	mock.TestingT
	Cleanup(func())
}) *Gatekeeper {
	mock := &Gatekeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
