// Code generated by mockery v2.41.0. DO NOT EDIT.

package idempotency

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Idempotency is an autogenerated mock type for the Idempotency type
type Idempotency struct {
	mock.Mock
}

type Idempotency_Expecter struct {
	mock *mock.Mock
}

func (_m *Idempotency) EXPECT() *Idempotency_Expecter {
	return &Idempotency_Expecter{mock: &_m.Mock}
}

// Connect provides a mock function with given fields: ctx
func (_m *Idempotency) Connect(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Idempotency_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type Idempotency_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Idempotency_Expecter) Connect(ctx interface{}) *Idempotency_Connect_Call {
	return &Idempotency_Connect_Call{Call: _e.mock.On("Connect", ctx)}
}

func (_c *Idempotency_Connect_Call) Run(run func(ctx context.Context)) *Idempotency_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Idempotency_Connect_Call) Return(_a0 error) *Idempotency_Connect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Idempotency_Connect_Call) RunAndReturn(run func(context.Context) error) *Idempotency_Connect_Call {
	_c.Call.Return(run)
	return _c
}

// Disconnect provides a mock function with given fields: ctx
func (_m *Idempotency) Disconnect(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Disconnect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Idempotency_Disconnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Disconnect'
type Idempotency_Disconnect_Call struct {
	*mock.Call
}

// Disconnect is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Idempotency_Expecter) Disconnect(ctx interface{}) *Idempotency_Disconnect_Call {
	return &Idempotency_Disconnect_Call{Call: _e.mock.On("Disconnect", ctx)}
}

func (_c *Idempotency_Disconnect_Call) Run(run func(ctx context.Context)) *Idempotency_Disconnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Idempotency_Disconnect_Call) Return(_a0 error) *Idempotency_Disconnect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Idempotency_Disconnect_Call) RunAndReturn(run func(context.Context) error) *Idempotency_Disconnect_Call {
	_c.Call.Return(run)
	return _c
}

// Liveness provides a mock function with given fields:
func (_m *Idempotency) Liveness() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Liveness")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Idempotency_Liveness_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Liveness'
type Idempotency_Liveness_Call struct {
	*mock.Call
}

// Liveness is a helper method to define mock.On call
func (_e *Idempotency_Expecter) Liveness() *Idempotency_Liveness_Call {
	return &Idempotency_Liveness_Call{Call: _e.mock.On("Liveness")}
}

func (_c *Idempotency_Liveness_Call) Run(run func()) *Idempotency_Liveness_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Idempotency_Liveness_Call) Return(_a0 error) *Idempotency_Liveness_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Idempotency_Liveness_Call) RunAndReturn(run func() error) *Idempotency_Liveness_Call {
	_c.Call.Return(run)
	return _c
}

// Readiness provides a mock function with given fields:
func (_m *Idempotency) Readiness() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Readiness")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Idempotency_Readiness_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Readiness'
type Idempotency_Readiness_Call struct {
	*mock.Call
}

// Readiness is a helper method to define mock.On call
func (_e *Idempotency_Expecter) Readiness() *Idempotency_Readiness_Call {
	return &Idempotency_Readiness_Call{Call: _e.mock.On("Readiness")}
}

func (_c *Idempotency_Readiness_Call) Run(run func()) *Idempotency_Readiness_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Idempotency_Readiness_Call) Return(_a0 error) *Idempotency_Readiness_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Idempotency_Readiness_Call) RunAndReturn(run func() error) *Idempotency_Readiness_Call {
	_c.Call.Return(run)
	return _c
}

// Validate provides a mock function with given fields: ctx, key
func (_m *Idempotency) Validate(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Idempotency_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type Idempotency_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *Idempotency_Expecter) Validate(ctx interface{}, key interface{}) *Idempotency_Validate_Call {
	return &Idempotency_Validate_Call{Call: _e.mock.On("Validate", ctx, key)}
}

func (_c *Idempotency_Validate_Call) Run(run func(ctx context.Context, key string)) *Idempotency_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Idempotency_Validate_Call) Return(_a0 error) *Idempotency_Validate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Idempotency_Validate_Call) RunAndReturn(run func(context.Context, string) error) *Idempotency_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// NewIdempotency creates a new instance of Idempotency. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIdempotency(t interface {
	mock.TestingT
	Cleanup(func())
}) *Idempotency {
	mock := &Idempotency{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
